const { spawn } = require('child_process');
const axios = require('axios');

const BASE_URL = 'http://localhost:3001/api/nft';

async function waitForServer() {
  console.log('‚è≥ Waiting for server to start...');
  for (let i = 0; i < 30; i++) {
    try {
      await axios.get(`${BASE_URL}/contract-status`);
      console.log('‚úÖ Server is ready!');
      return true;
    } catch (error) {
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
  console.log('‚ùå Server failed to start');
  return false;
}

async function testAPI() {
  try {
    console.log('üîç Testing Backend API...\n');

    // Test 1: Check contract status
    console.log('1Ô∏è‚É£ Testing contract status...');
    try {
      const response = await axios.get(`${BASE_URL}/contract-status`);
      console.log('‚úÖ Contract status:', response.data);
    } catch (error) {
      console.log('‚ùå Contract status error:', error.response?.data || error.message);
    }

    // Test 2: Test whitelist
    console.log('\n2Ô∏è‚É£ Testing whitelist...');
    const testWallet = '0x8e4cf11a8f982c0cfd54f3f1f6a0db91f0c1b30a';
    try {
      const response = await axios.post(`${BASE_URL}/test-whitelist`, {
        studentAddress: testWallet
      });
      console.log('‚úÖ Test whitelist:', response.data);
    } catch (error) {
      console.log('‚ùå Test whitelist error:', error.response?.data || error.message);
    }

    // Test 3: Test mint
    console.log('\n3Ô∏è‚É£ Testing mint...');
    try {
      const response = await axios.post(`${BASE_URL}/test-mint`, {
        studentWallet: testWallet
      });
      console.log('‚úÖ Test mint:', response.data);
    } catch (error) {
      console.log('‚ùå Test mint error:', error.response?.data || error.message);
    }

  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
  }
}

// Start backend server
console.log('üöÄ Starting backend server...');
const server = spawn('npm', ['start'], {
  cwd: __dirname,
  stdio: 'pipe'
});

server.stdout.on('data', (data) => {
  console.log(`üìã Server: ${data}`);
});

server.stderr.on('data', (data) => {
  console.log(`‚ùå Server Error: ${data}`);
});

// Wait for server to start then test
setTimeout(async () => {
  const isReady = await waitForServer();
  if (isReady) {
    await testAPI();
  }
  server.kill();
}, 2000);

// Handle process exit
process.on('SIGINT', () => {
  console.log('\nüõë Stopping server...');
  server.kill();
  process.exit();
}); 