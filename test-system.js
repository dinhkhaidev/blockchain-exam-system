const fs = require('fs');
const path = require('path');

console.log('üîç Ki·ªÉm tra h·ªá th·ªëng Blockchain Exam Authentication...\n');

// Ki·ªÉm tra c·∫•u tr√∫c th∆∞ m·ª•c
const criticalFiles = [
  'contracts',
  'frontend',
  'backend',
  'frontend/src',
  'frontend/src/components',
  'frontend/src/pages',
  'frontend/src/contexts',
  'frontend/src/contracts',
  'backend/routes'
];

const requiredFiles = [
  'contracts/contracts/ExamRegistration.sol',
  'contracts/contracts/ExamCertificateNFT.sol',
  'contracts/scripts/deploy.js',
  'frontend/src/App.js',
  'frontend/src/components/Navbar.js',
  'frontend/src/pages/Home.js',
  'frontend/src/pages/Register.js',
  'frontend/src/pages/Verify.js',
  'frontend/src/pages/Exam.js',
  'frontend/src/pages/Dashboard.js',
  'frontend/src/pages/Admin.js',
  'frontend/src/pages/NFTGallery.js',
  'frontend/src/contexts/Web3Context.js',
  'frontend/src/contracts/ExamRegistration.json',
  'frontend/src/contracts/ExamCertificateNFT.json',
  'backend/server.js',
  'backend/routes/auth.js',
  'backend/routes/verification.js',
  'backend/routes/exam.js',
  'backend/routes/nft.js',
  'backend/routes/admin.js',
  'package.json',
  'README.md',
  'SETUP.md'
];

console.log('üìÅ Ki·ªÉm tra c·∫•u tr√∫c th∆∞ m·ª•c...');
let dirCheckPassed = true;
for (const dir of requiredDirs) {
  if (!fs.existsSync(dir)) {
    console.log(`‚ùå Thi·∫øu th∆∞ m·ª•c: ${dir}`);
    dirCheckPassed = false;
  } else {
    console.log(`‚úÖ ${dir}`);
  }
}

console.log('\nüìÑ Ki·ªÉm tra c√°c file c·∫ßn thi·∫øt...');
let fileCheckPassed = true;
for (const file of requiredFiles) {
  if (!fs.existsSync(file)) {
    console.log(`‚ùå Thi·∫øu file: ${file}`);
    fileCheckPassed = false;
  } else {
    console.log(`‚úÖ ${file}`);
  }
}

// Ki·ªÉm tra package.json files
console.log('\nüì¶ Ki·ªÉm tra dependencies...');
const packageFiles = [
  'package.json',
  'frontend/package.json',
  'backend/package.json',
  'contracts/package.json'
];

let packageCheckPassed = true;
for (const pkgFile of packageFiles) {
  if (fs.existsSync(pkgFile)) {
    try {
      const pkg = JSON.parse(fs.readFileSync(pkgFile, 'utf8'));
      console.log(`‚úÖ ${pkgFile} - ${pkg.name || 'package'}`);
    } catch (error) {
      console.log(`‚ùå ${pkgFile} - JSON kh√¥ng h·ª£p l·ªá`);
      packageCheckPassed = false;
    }
  } else {
    console.log(`‚ùå Thi·∫øu file: ${pkgFile}`);
    packageCheckPassed = false;
  }
}

// Ki·ªÉm tra Smart Contracts
console.log('\nüîó Ki·ªÉm tra Smart Contracts...');
const contractFiles = [
  'contracts/contracts/ExamRegistration.sol',
  'contracts/contracts/ExamCertificateNFT.sol'
];

let contractCheckPassed = true;
for (const contract of contractFiles) {
  if (fs.existsSync(contract)) {
    const content = fs.readFileSync(contract, 'utf8');
    if (content.includes('contract') && content.includes('function')) {
      console.log(`‚úÖ ${contract} - H·ª£p l·ªá`);
    } else {
      console.log(`‚ùå ${contract} - Kh√¥ng ph·∫£i Solidity contract`);
      contractCheckPassed = false;
    }
  } else {
    console.log(`‚ùå Thi·∫øu file: ${contract}`);
    contractCheckPassed = false;
  }
}

// Ki·ªÉm tra React Components
console.log('\n‚öõÔ∏è Ki·ªÉm tra React Components...');
const reactComponents = [
  'frontend/src/App.js',
  'frontend/src/components/Navbar.js',
  'frontend/src/pages/Home.js',
  'frontend/src/pages/Register.js',
  'frontend/src/pages/Verify.js',
  'frontend/src/pages/Exam.js',
  'frontend/src/pages/Dashboard.js',
  'frontend/src/pages/Admin.js',
  'frontend/src/pages/NFTGallery.js'
];

let reactCheckPassed = true;
for (const component of reactComponents) {
  if (fs.existsSync(component)) {
    const content = fs.readFileSync(component, 'utf8');
    if (content.includes('import React') || content.includes('export default')) {
      console.log(`‚úÖ ${component} - H·ª£p l·ªá`);
    } else {
      console.log(`‚ùå ${component} - Kh√¥ng ph·∫£i React component`);
      reactCheckPassed = false;
    }
  } else {
    console.log(`‚ùå Thi·∫øu file: ${component}`);
    reactCheckPassed = false;
  }
}

// Ki·ªÉm tra Backend Routes
console.log('\nüîß Ki·ªÉm tra Backend Routes...');
const backendRoutes = [
  'backend/routes/auth.js',
  'backend/routes/verification.js',
  'backend/routes/exam.js',
  'backend/routes/nft.js',
  'backend/routes/admin.js'
];

let backendCheckPassed = true;
for (const route of backendRoutes) {
  if (fs.existsSync(route)) {
    const content = fs.readFileSync(route, 'utf8');
    if (content.includes('router.get') || content.includes('router.post') || content.includes('express')) {
      console.log(`‚úÖ ${route} - H·ª£p l·ªá`);
    } else {
      console.log(`‚ùå ${route} - Kh√¥ng ph·∫£i Express route`);
      backendCheckPassed = false;
    }
  } else {
    console.log(`‚ùå Thi·∫øu file: ${route}`);
    backendCheckPassed = false;
  }
}

// T·ªïng k·∫øt
console.log('\nüìä T·ªîNG K·∫æT KI·ªÇM TRA:');
console.log('=====================================');

if (dirCheckPassed && fileCheckPassed && packageCheckPassed && contractCheckPassed && reactCheckPassed && backendCheckPassed) {
  console.log('üéâ T·∫§T C·∫¢ KI·ªÇM TRA ƒê·ªÄU TH√ÄNH C√îNG!');
  console.log('‚úÖ H·ªá th·ªëng ƒë√£ s·∫µn s√†ng ƒë·ªÉ ch·∫°y');
  console.log('\nüöÄ ƒê·ªÉ ch·∫°y h·ªá th·ªëng:');
  console.log('1. cd contracts && npm install');
  console.log('2. npx hardhat compile');
  console.log('3. npx hardhat node');
  console.log('4. npx hardhat run scripts/deploy.js --network localhost');
  console.log('5. cd ../backend && npm install');
  console.log('6. npm start');
  console.log('7. cd ../frontend && npm install');
  console.log('8. npm start');
} else {
  console.log('‚ùå C√ì L·ªñI TRONG H·ªÜ TH·ªêNG!');
  console.log('Vui l√≤ng ki·ªÉm tra v√† s·ª≠a c√°c l·ªói tr√™n tr∆∞·ªõc khi ch·∫°y.');
}

console.log('\nüìù L∆∞u √Ω:');
console.log('- ƒê·∫£m b·∫£o MetaMask ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† k·∫øt n·ªëi');
console.log('- ƒê·∫£m b·∫£o c√≥ ƒë·ªß ETH trong v√≠ ƒë·ªÉ deploy contracts');
console.log('- Ki·ªÉm tra port 3000, 5000, 8545 kh√¥ng b·ªã chi·∫øm');
console.log('- ƒê·∫£m b·∫£o Node.js version >= 14.0.0'); 
const path = require('path');

console.log('üîç Ki·ªÉm tra h·ªá th·ªëng Blockchain Exam Authentication...\n');

// Ki·ªÉm tra c·∫•u tr√∫c th∆∞ m·ª•c
const requiredDirs = [
  'contracts',
  'frontend',
  'backend',
  'frontend/src',
  'frontend/src/components',
  'frontend/src/pages',
  'frontend/src/contexts',
  'frontend/src/contracts',
  'backend/routes'
];

